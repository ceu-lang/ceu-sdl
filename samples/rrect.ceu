#include "sdl/sdl.ceu"

data AnchorX;
data AnchorX.Left;
data AnchorX.Center;
data AnchorX.Right;

data AnchorY;
data AnchorY.Top;
data AnchorY.Center;
data AnchorY.Bottom;

data Anchor with
    var AnchorX x;
    var AnchorY y;
end

data IRect with
    var   SDL_Rect offset;
    var   Anchor   a_offset;
    var&? IRect    ref;
    var   Anchor?  a_ref;
    var   SDL_Rect abs;
    event none     changed;
end

code/await Rect (var IRect rect_) -> (var& IRect rect) -> NEVER
do
    rect = &rect_;
    loop do
        if rect.ref? then
            rect.abs.x = rect.ref!.abs.x + rect.offset.x;
            rect.abs.y = rect.ref!.abs.y + rect.offset.y;
            rect.abs.w = rect.offset.w;
            rect.abs.h = rect.offset.h;

            if rect.a_ref!.x is AnchorX.Center then
                rect.abs.x = rect.abs.x + rect.ref!.abs.w/2;
            else/if rect.a_ref!.x is AnchorX.Right then
                rect.abs.x = rect.abs.x + rect.ref!.abs.w;
            end

            if rect.a_ref!.y is AnchorY.Center then
                rect.abs.y = rect.abs.y + rect.ref!.abs.h/2;
            else/if rect.a_ref!.y is AnchorY.Bottom then
                rect.abs.y = rect.abs.y + rect.ref!.abs.h;
            end

        else
            rect.abs = rect.offset;
        end

        if rect.a_offset.x is AnchorX.Center then
            rect.abs.x = rect.abs.x - rect.abs.w/2;
        else/if rect.a_offset.x is AnchorX.Right then
            rect.abs.x = rect.abs.x - rect.abs.w;
        end

        if rect.a_offset.y is AnchorY.Center then
            rect.abs.y = rect.abs.y - rect.abs.h/2;
        else/if rect.a_offset.y is AnchorY.Bottom then
            rect.abs.y = rect.abs.y - rect.abs.h;
        end

        emit rect.changed;
        par/or do
            await rect.changed;
        with
            if rect.ref? then
                await rect.ref!.changed;
            else
                await FOREVER;
            end
        end
    end
end

var IRect r1 = val IRect(SDL_Rect(0,0,100,100),
                         Anchor(AnchorX.Left(), AnchorY.Top()),
                         _,_,
                         _,_);
var& Rect rr1 = spawn Rect(r1);

var IRect r2 = val IRect(SDL_Rect(0,0,50,50),
                         Anchor(AnchorX.Left(), AnchorY.Top()),
                         &rr1.rect,
                         Anchor(AnchorX.Right(), AnchorY.Bottom()),
                         _,_);
var& Rect rr2 = spawn Rect(r2);


var&? SDL_Init sdl =
    spawn SDL_Init("Reactive Rectangles", 800,480, SDL_Color(0xFF,0xFF,0x00,0xFF));

watching sdl do
    par do
        loop do
            await 1s;
            rr1.rect.offset.x = rr1.rect.offset.x + 50;
            emit rr1.rect.changed;

            await 1s;
            rr1.rect.offset.w = rr1.rect.offset.w + 50;
            emit rr1.rect.changed;

            await 1s;
            rr1.rect.offset.y = rr1.rect.offset.y + 50;
            emit rr1.rect.changed;

            await 1s;
            rr1.rect.offset.h = rr1.rect.offset.h + 50;
            emit rr1.rect.changed;
        end
    with
        every SDL_REDRAW do
            _SDL_SetRenderDrawColor(&&sdl.ren, 0xFF,0x00,0x00,0xFF);
            _SDL_RenderFillRect(&&sdl.ren, (&&rr1.rect.abs as _SDL_Rect&&));
            _SDL_SetRenderDrawColor(&&sdl.ren, 0xFF,0x00,0xFF,0xFF);
            _SDL_RenderFillRect(&&sdl.ren, (&&rr2.rect.abs as _SDL_Rect&&));
        end
    end
end

escape 0;
